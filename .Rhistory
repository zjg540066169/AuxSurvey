if(family$family == "gaussian"){
X_train = as.matrix(samples[, covariates])
y_train = dplyr::pull(samples, svyVar)
if(!stan_verbose)
model <- BART::wbart(X_train, y_train, ndpost = npost, nskip = nskip)
else{
model <- BART::wbart(X_train, y_train, ndpost = npost, nskip = nskip)
}
}
?BART::wbart
model2 <- BART::wbart(X_train, y_train, ndpost = npost, nskip = nskip)
s = "T"
svypopu1 = as.matrix(dplyr::filter(population, eval(parse(text = s)))[, covariates])
svysmpl1 = as.matrix(dplyr::filter(samples, eval(parse(text = s)))[, covariates])
yhats_pop <- predict(model, svypopu1)
yhats_pop2 <- predict(model2, svypopu1)
dim(yhats_pop2)
library(MCMCpack)
combine.chains = mcmc.list(mcmc(yhats_pop), mcmc(yhats_pop2))
gelman.diag(combine.chains)
combine.chains = mcmc.list(mcmc(yhats_pop[,1]), mcmc(yhats_pop2[,1]))
gelman.diag(combine.chains)
combine.chains = mcmc.list(mcmc(yhats_pop[,2]), mcmc(yhats_pop2[,2]))
gelman.diag(combine.chains)
a = gelman.diag(combine.chains)
a$psrf
for(i in 1:3000){
combine.chains = mcmc.list(mcmc(yhats_pop[,i]), mcmc(yhats_pop2[,i]))
a = gelman.diag(combine.chains)
print(a$psrf)
}
combine.chains = mcmc.list(mcmc(yhats_pop), mcmc(yhats_pop2))
a = gelman.diag(combine.chains)
doParallel::stopImplicitCluster()
combine.chains = mcmc.list(mcmc(yhats_pop), mcmc(yhats_pop2))
a = gelman.diag(combine.chains, multivariate = F)
a
a$psrf
summary(a$psrf)
require("devtools")
install_github("https://github.com/zjg540066169/AuxSurvey")
devtools::document()
devtools::document()
install.packages("rhub")
rhub::rhub_setup()
rhub::rhub_doctor()
rhub::rhub_check()
usethis::create_package("../new/AuxSurvey")
usethis::use_vignette("introduction")
library(AuxSurvey)
# Generate data
data = simulate(N = 3000, discretize = c(3, 5, 10), setting = 1, seed = 123)
population = data$population  # Full population data (3000 cases)
samples = data$samples  # Sample data (600 cases)
ipw = 1 / samples$true_pi  # True inverse probability weighting
est_ipw = 1 / samples$estimated_pi  # Estimated inverse probability weighting
true_mean = mean(population$Y1)  # True value of the estimator
# Unweighted sample mean
sample_mean = auxsurvey("~Y1", auxiliary = NULL, weights = NULL, samples = samples, population = NULL, method = "sample_mean", levels = 0.95)
# IPW sample mean
IPW_sample_mean = auxsurvey("~Y1", auxiliary = NULL, weights = ipw, samples = samples, population = population, method = "sample_mean", levels = 0.95)
# Unweighted Raking for auX_5 with interaction with Z1
rake_5_Z1 = auxsurvey("~Y1", auxiliary = "Z2 + Z3 + auX_5 * Z1", weights = NULL, samples = samples, population = population, method = "rake", levels = 0.95)
# IPW Raking for auX_10
rake_10 = auxsurvey("~Y1", auxiliary = "Z1 + Z2 + Z3 + auX_10", weights = ipw, samples = samples, population = population, method = "rake", levels = c(0.95, 0.8))
# MRP with auX_3
MRP_1 = auxsurvey("Y1 ~ Z1 + Z2", auxiliary = "Z3 + auX_3", samples = samples, population = population, method = "MRP", levels = 0.95)
devtools::build_vignettes()
devtools::document()
devtools::build()
devtools::check_win_devel()
devtools::document()
devtools::check_man()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
library(mgcv)
library(rstanarm)
#' }
#'
#' @rawNamespace import(stats, except = filter)
#' @importFrom gtools quantcut
#' @import mgcv
#' @importFrom dplyr filter %>% as_tibble
#' @import stringr
#' @import BART
#'
#' @export
simulate = function(N = 3000, discretize =c(3, 5, 10), setting = c(1,2,3), seed = NULL){
if(!is.null(seed))
set.seed(seed)
Z = sapply(c(0.7, 0.5, 0.4), function(p){
return(rbinom(N, 1, p))
})
X = rnorm(N)
W = rnorm(N)
auX = sapply(discretize, function(q) gtools::quantcut(X, q = q, labels = FALSE))
colnames(auX) = paste0("auX_", discretize)
auW = sapply(discretize, function(q) gtools::quantcut(W, q = q, labels = FALSE))
colnames(auW) = paste0("auW_", discretize)
if(setting == 1){
pi = rstanarm::invlogit(- 1.25 - Z[,1] + 1.25*Z[,2] - 0.75*Z[,3] + 0.75*X - 0.10*X^2)
Y1 = rnorm(N, 15 + 2.5*Z[,1] - Z[,2] + Z[,3] - 2*X + 3.75*X^2, 3)
Y2 = rbinom(N, 1, rstanarm::invlogit(-2.5 + 0.75*Z[,1] - 2.5*Z[,2] + 1.5*Z[,3] - 0.25*X + 1.5*X^2))
}
if(setting == 2){
pi = rstanarm::invlogit(- 1.25 - Z[,1] + 1.25*Z[,2] - 0.75*Z[,3] + 0.75*W - 0.10*W^2)
Y1 = rnorm(N, 15 + 2.5*Z[,1] - Z[,2] + Z[,3] - 2*X + 3.75*X^2, 3)
Y2 = rbinom(N, 1, rstanarm::invlogit(-2.5 + 0.75*Z[,1] - 2.5*Z[,2] + 1.5*Z[,3] - 0.25*X + 1.5*X^2))
}
if(setting == 3){
pi = invlogit(-0.9 - 0.5 * Z[,1] + 0.75 * Z[,2] - Z[,3] + 0.5 * X - 0.1 * X^2 + 0.5 * Z[,1] * X + 0.25 * Z[,1] * X^2)
Y1 = rnorm(N, 15 + 2.5 * Z[,1] - Z[,2] + Z[,3] - 2 * X + X^2 + Z[,1] * X - 2 * Z[,1] * X^2, 2)
Y2 = rbinom(N, 1, invlogit(-1.75 + 0.75 * Z[,1] - 1.5 * Z[,2] + 1.5 * Z[,3] - 1.5 * X + X^2 + Z[,1] * X - 2 * Z[,1] * X^2))
}
if(setting == 4){
pi = invlogit(-0.9 - 0.5 * Z[,1] + 0.75 * Z[,2] - Z[,3] + 0.5 * X - 0.1 * X^2 + 0.5 * Z[,1] * X + 0.75 * Z[,1] * X^2)
Y1 = rnorm(N, 15 + 2.5 * Z[,1] - Z[,2] + Z[,3] - 2 * X + X^2 + 1 * Z[,1] * X - 4 * Z[,1] * X^2, 2)
Y2 = rbinom(N, 1, invlogit(-1.75 + 0.75 * Z[,1] - 1.5 * Z[,2] + 1.5 * Z[,3] - 1.5 * X + X^2 + Z[,1] * X - 2.5 * Z[,1] * X^2))
}
population = data.frame(
id = seq(1, N),
Z = Z,
X = X,
W = W,
auX = auX,
auW = auW,
Y1 = Y1,
Y2 = Y2,
true_pi = pi,
logit_true_pi = rstanarm::logit(pi)
)
U = runif(N)
population$inclusion = ifelse(pi > U, T, F)
samples = population[population$inclusion == T,]
colnames(population) = c("id", "Z1", "Z2", "Z3", "X", "W", colnames(auX), colnames(auW), "Y1", "Y2", "true_pi", "logit_true_pi", "inclusion")
colnames(samples) = c("id", "Z1", "Z2", "Z3", "X", "W", colnames(auX), colnames(auW), "Y1", "Y2", "true_pi", "logit_true_pi", "inclusion")
ps_model = BART::pbart(as.matrix(population[, c("Z1", "Z2", "Z3", "X")]), population$inclusion, ntree=50, keepevery= 1, ndpost = 100)
population$estimated_pi = predict(ps_model, as.matrix(population[, c("Z1", "Z2", "Z3", "X")]))$prob.test.mean
samples$estimated_pi = predict(ps_model, as.matrix(samples[, c("Z1", "Z2", "Z3", "X")]))$prob.test.mean
population$logit_estimated_pi = logit(population$estimated_pi)
samples$logit_estimated_pi = logit(samples$estimated_pi)
ps_model_with_W <- BART::pbart(as.matrix(population[, c("Z1", "Z2", "Z3", "X", "W")]), population$inclusion, ntree=50, keepevery= 1, ndpost = 100)
population$estimated_pi_with_W = predict(ps_model_with_W, as.matrix(population[, c("Z1", "Z2", "Z3", "X", "W")]))$prob.test.mean
samples$estimated_pi_with_W = predict(ps_model_with_W, as.matrix(samples[, c("Z1", "Z2", "Z3", "X", "W")]))$prob.test.mean
population$logit_estimated_pi_with_W = logit(population$estimated_pi_with_W)
samples$logit_estimated_pi_with_W = logit(samples$estimated_pi_with_W)
samples$inclusion = NULL
population$inclusion = NULL
return(list(population = dplyr::as_tibble(population), samples = dplyr::as_tibble(samples)))
}
data = simulate(N = 3000, discretize = 3, setting = 1, seed = 123)
population = data$population
samples = data$samples
head(population)
uwt <- function(svysmpl, svyVar, svypopu = NULL, subset = NULL, family = gaussian(), invlvls, weights = NULL) {
subset = c("T", subset)
if(is.null(svypopu)){
if(is.null(weights))
des <- survey::svydesign(ids = ~1, weights = ~1, data = svysmpl)
else{
des <- survey::svydesign(ids = ~1, weights = ~weights, data = svysmpl)
}
}else{
cat("population parameter is specified, so the finite population correction will be calculated for sample mean.\n")
svysmpl$fpc <- nrow(svypopu)
if(is.null(weights))
des <- survey::svydesign(ids = ~1, weights = ~1, data = svysmpl, fpc = ~fpc)
else{
des <- survey::svydesign(ids = ~1, weights = ~weights, data = svysmpl, fpc = ~fpc)
}
}
infr = sapply(subset, function(s){
des = subset(des, eval(parse(text = s)))
if(family$family == "binomial"){
suppressWarnings(desc <- sapply(invlvls, function(lv) paste0('~', svyVar) %>% as.formula() %>%
survey::svyciprop(des, method = "logit", level = lv), simplify = F))
tCI <- lapply(desc, function(i){
ci = confint(i, df = survey::degf(des), parm = svyVar)
colnames(ci) = stringr::str_replace(colnames(ci), "%", " %")
ci
})
tCI = do.call("cbind", tCI)
desc = desc[[1]]
}
if(family$family == "gaussian"){
desc <- paste0('~', svyVar) %>% as.formula() %>% survey::svymean(des)
tCI <- sapply(invlvls, confint, object = desc, parm = svyVar, simplify = F)
tCI = do.call("cbind", tCI)
}
# get estmates and standard error
if(!is.null(svypopu)){
infr <- cbind(est = desc[svyVar], se = sqrt(diag(vcov(desc))), tCI, sample_size = survey::degf(des) + 1, population_size =  nrow(dplyr::filter(svypopu, eval(parse(text = s)))))
}else{
infr <- cbind(est = desc[svyVar], se = sqrt(diag(vcov(desc))), tCI, sample_size = survey::degf(des) + 1)
}
if(is.null(weights))
rownames(infr) = "sample_mean"
else{
rownames(infr) = "Weighted-sample_mean"
}
infr
}, simplify = F)
names(infr)[1] = "All"
if(length(infr) == 1)
return(infr[[1]])
return(infr)
}
data = simulate(N = 3000, discretize = 3, setting = 3, seed = 123)
population = data$population
samples = data$samples
ipw = 1 / samples$true_pi
IPW_sample_mean = uwt(svysmpl = samples, svyVar = "Y1", svypopu = population,
subset = c("Z1 == 1 & Z2 == 1"), family = gaussian(),
invlvls = c(0.95), weights = ipw)
IPW_sample_mean
unweighted_sample_mean = uwt(svysmpl = samples, svyVar = "Y1", svypopu = population,
subset = NULL, family = gaussian(), invlvls = c(0.95), weights = NULL)
IPW_sample_mean
unweighted_sample_mean
rake_wt <- function(svysmpl, svypopu, auxVars, svyVar, subset = NULL, family = gaussian(), invlvls, weights = NULL, maxiter = 50) {
subset = c("T", subset)
svysmpl$fpc <- nrow(svypopu)
if(is.null(weights))
des <- survey::svydesign(ids = ~1, weights = ~1, data = svysmpl, fpc = ~fpc)
else{
des <- survey::svydesign(ids = ~1, weights = ~weights, data = svysmpl, fpc = ~fpc)
}
popu_tab <- lapply(auxVars, function (Var) {
Var = paste(all.vars(as.formula(paste0("~", Var))), collapse = "+")
fmla <- paste('~', Var, sep = ' ') %>% as.formula()
tab <- xtabs(fmla, svypopu)
return(tab)
} )
fmla_list <- lapply(auxVars, function (Var) {
Var = paste(all.vars(as.formula(paste0("~", Var))), collapse = "+")
paste('~', Var, sep = ' ') %>% as.formula() %>% return()
} )
rakingobj <- survey::rake(des, fmla_list, popu_tab,
control = list(maxit = maxiter, epsilon = 1, verbose = FALSE))
infr = sapply(subset, function(s){
rakingobj = subset(rakingobj, eval(parse(text = s)))
if(family$family == "binomial"){
suppressWarnings(rakest <- sapply(invlvls, function(lv) paste0('~', svyVar) %>% as.formula() %>%
survey::svyciprop(rakingobj, method = "logit", level = lv), simplify = F))
tCI <- lapply(rakest, function(i){
ci = confint(i, df = survey::degf(rakingobj), parm = svyVar)
colnames(ci) = stringr::str_replace(colnames(ci), "%", " %")
ci
})
tCI = do.call("cbind", tCI)
rakest = rakest[[1]]
}
if(family$family == "gaussian"){
rakest <- paste0('~', svyVar) %>% as.formula() %>%
survey::svymean(rakingobj)
tCI <- sapply(invlvls, confint, object = rakest, df = survey::degf(rakingobj),
parm = svyVar, simplify = F)
tCI = do.call("cbind", tCI)
}
infr <- cbind(est = rakest[svyVar], se = sqrt(diag(vcov(rakest))), tCI, sample_size = survey::degf(rakingobj) + 1, population_size = nrow(dplyr::filter(svypopu, eval(parse(text = s)))))
if(is.null(weights))
rownames(infr) = "rake"
else{
rownames(infr) = "Weighted-rake"
}
return(infr)
}, simplify = F)
names(infr)[1] = "All"
if(length(infr) == 1)
return(infr[[1]])
return(infr)
}
auxVars = c("Z1", "Z2", "Z3")
Weighted_rake = rake_wt(svysmpl = samples, svypopu = population, auxVars = auxVars,
svyVar = "Y1", subset = NULL, family = gaussian(),
invlvls = c(0.95), weights = ipw, maxiter = 50)
Weighted_rake
Unweighted_rake = rake_wt(svysmpl = samples, svypopu = population, auxVars = auxVars,
svyVar = "Y1", subset = NULL, family = gaussian(),
invlvls = c(0.95), weights = NULL, maxiter = 50)
Unweighted_rake
postStr_wt <- function(svysmpl, svypopu, auxVars, svyVar, subset = NULL, family = gaussian(), invlvls, weights = NULL) {
subset = c("T", subset)
svysmpl$fpc <- nrow(svypopu) # get population sample size
# specify svydesign
if(is.null(weights))
des <- survey::svydesign(ids = ~1, weights = ~1, data = svysmpl, fpc = ~fpc)
else{
des <- survey::svydesign(ids = ~1, weights = ~weights, data = svysmpl, fpc = ~fpc)
}
fmla <- paste(auxVars, collapse = "+")
fmla = paste('~', fmla, sep = ' ') %>% as.formula()
# set for post-stratification
tab <- xtabs(fmla, svypopu)
PSobj <- survey::postStratify(des, fmla, tab, partial = TRUE)
#d = population[population$Z3 == 0 &population$auX_5  == 1,  ]
#table(d$Z1, d$Z2)
infr = sapply(subset, function(s){
# make auxVar as a readable formula, for example, if auxVar = c(Z1, Z2, Z3), the result formula is ~Z1 + Z2 + Z3
PSobj = subset(PSobj, eval(parse(text = s)))
#svytable(fmla, PSobj, round = T)
# get estimates and confidence intervals
# this function allows users specify multiple confidence levels, such as invlvls = c(0.95, 0.8)
# so sapply function will calculate every confidence intervals separately
if(family$family == "binomial"){
suppressWarnings(PSest <- sapply(invlvls, function(lv) paste0('~', svyVar) %>% as.formula() %>%
survey::svyciprop(PSobj, method = "logit", level = lv), simplify = F))
tCI <- lapply(PSest, function(i){
ci = confint(i, df = survey::degf(PSobj), parm = svyVar)
colnames(ci) = str_replace(colnames(ci), "%", " %")
ci
})
tCI = do.call("cbind", tCI)
PSest = PSest[[1]]
}
if(family$family == "gaussian"){
PSest <- paste0('~', svyVar) %>% as.formula() %>% survey::svymean(PSobj)
tCI <- sapply(invlvls, confint, object = PSest, df = survey::degf(PSobj),
parm = svyVar, simplify = F)
tCI = do.call("cbind", tCI)
}
#print(s)
# get estmates and standard error
infr <- cbind(est = PSest[svyVar], se = sqrt(diag(vcov(PSest))), tCI, sample_size = survey::degf(PSobj) + 1, population_size = nrow(dplyr::filter(svypopu, eval(parse(text = s)))))
if(is.null(weights))
rownames(infr) = "postStratify"
else{
rownames(infr) = "Weighted-postStratify"
}
return(infr)
}, simplify = F)
names(infr)[1] = "All"
if(length(infr) == 1)
return(infr[[1]])
return(infr)
}
Weighted_postStratify = postStr_wt(svysmpl = samples, svypopu = population, auxVars = auxVars,
svyVar = "Y1", subset = NULL, family = gaussian(),
invlvls = c(0.95), weights = ipw)
Weighted_postStratify
Unweighted_postStratify = postStr_wt(svysmpl = samples, svypopu = population, auxVars = auxVars,
svyVar = "Y1", subset = NULL, family = gaussian(),
invlvls = c(0.95), weights = NULL)
Unweighted_postStratify
devtools::document()
devtools::document()
devtools::check()
svyBayesmod <- function(svysmpl, svypopu, outcome_formula, BayesFun, subset = NULL, family = gaussian(), invlvls, weights = NULL, nskip = 1000, npost = 1000, nchain = 4, printmod = TRUE, doFigure = FALSE, useTrueSample = F, stan_verbose = F, HPD_CI = F, seed = NULL) {
if (!is.null(seed))
set.seed(seed)
#print(outcome_formula)
subset = c("T", subset)
fmla <- outcome_formula[1] %>% as.formula()
#print("start fit model")
if(!is.null(seed)){
if(is.null(weights)){
if(!is.na(outcome_formula[2])){
bayesmod <- get(BayesFun)(fmla, family = family, random = as.formula(outcome_formula[2]), data = svysmpl, iter = nskip + npost, warmup = nskip, chains = nchain, refresh = stan_verbose, seed = seed)
}else{
bayesmod <- get(BayesFun)(fmla, family = family, data = svysmpl, iter = nskip + npost, warmup = nskip, chains = nchain, refresh = stan_verbose, seed = seed)
}
}
else{
if(!is.na(outcome_formula[2])){
bayesmod <- get(BayesFun)(fmla, family = family, data = svysmpl, iter = nskip + npost, warmup = nskip, weights = weights, chains = nchain, random = as.formula(outcome_formula[2]), refresh = stan_verbose, seed = seed)
}else{
bayesmod <- get(BayesFun)(fmla, family = family, data = svysmpl, iter = nskip + npost, warmup = nskip, weights = weights, chains = nchain, refresh = stan_verbose, seed = seed)
}
#bayesmod <- get(BayesFun)(fmla, data = svysmpl, iter = nskip + npost, warmup = nskip, weights = weights, chains = nchain, random = as.formula(formula[2]))
}
}else{
if(is.null(weights)){
if(!is.na(outcome_formula[2])){
bayesmod <- get(BayesFun)(fmla, family = family, random = as.formula(outcome_formula[2]), data = svysmpl, iter = nskip + npost, warmup = nskip, chains = nchain, refresh = stan_verbose)
}else{
bayesmod <- get(BayesFun)(fmla, family = family, data = svysmpl, iter = nskip + npost, warmup = nskip, chains = nchain, refresh = stan_verbose)
}
}
else{
if(!is.na(outcome_formula[2])){
bayesmod <- get(BayesFun)(fmla, family = family, data = svysmpl, iter = nskip + npost, warmup = nskip, weights = weights, chains = nchain, random = as.formula(outcome_formula[2]), refresh = stan_verbose)
}else{
bayesmod <- get(BayesFun)(fmla, family = family, data = svysmpl, iter = nskip + npost, warmup = nskip, weights = weights, chains = nchain, refresh = stan_verbose)
}
#bayesmod <- get(BayesFun)(fmla, data = svysmpl, iter = nskip + npost, warmup = nskip, weights = weights, chains = nchain, random = as.formula(formula[2]))
}
}
#print("end fit model")
#if (meth %in% c('Cov', 'catCov') )  bayesmod <- stan_glm(fmla, data = svysmpl)
#if (meth %in% c('GAMcatCov' , 'GAM-Cov', 'GAM-PS', 'GAM-lgtPS', 'GAM-slgtPS') ) bayesmod <- stan_gamm4(fmla, data = svysmpl)
#bayesmod <- update(bayesmod, iter = 500)
if (printmod) summary(bayesmod) %>% print()
if (doFigure) {
p1 <- pp_check(bayesmod)
p2 <- pp_check(bayesmod, plotfun = 'scatter_avg')
p3 <- pp_check(bayesmod, plotfun = 'stat_2d', stat = c('mean', 'sd'))
p4 <- pp_check(bayesmod, plotfun = "error_binned")
ppcFig <- gridExtra::grid.arrange(p1, p2, p3, ncol = 3)
ppcFig <- gridExtra::grid.arrange(ppcFig, p4, ncol = 1)
ppcFig
}
if(useTrueSample == F){
infr = sapply(subset, function(s){
#print(s)
svypopu1 = dplyr::filter(svypopu, eval(parse(text = s)))
yhats <- posterior_epred(bayesmod, svypopu1)
post_est = rowMeans(yhats)
tCI = sapply(invlvls, function(level){
if(HPD_CI){
class(post_est) <- 'mcmc'
ci = coda::HPDinterval(post_est, probs = level, names = T)
names(ci) = paste(((1 - level)/2 * c(1, -1) + c(0, 1)) * 100, "%")
}else{
ci = ((1 - level)/2 * c(1, -1) + c(0, 1))
ci = quantile(post_est, probs = ci, names = T)
names(ci) = str_replace(names(ci), "%", " %")
}
ci
}, simplify = F)
tCI = do.call("c", tCI)
infr <- rbind(c(post_mean_est = mean(post_est), post_median_est = median(post_est), se = sd(post_est), tCI, sample_size = nrow(dplyr::filter(svysmpl, eval(parse(text = s)))), population_size = nrow(svypopu1)))
}, simplify = F)
names(infr)[1] = "All"
return(infr)
}else{
infr = sapply(subset, function(s){
svypopu1 = dplyr::filter(svypopu, eval(parse(text = s)))
svysmpl1 = dplyr::filter(svysmpl, eval(parse(text = s)))
yhats_pop <- posterior_predict(bayesmod, svypopu1, re.form = NA, seed = seed) # npost, non-sample_size
yhats_sam <- posterior_predict(bayesmod, svysmpl1, re.form = NA, seed = seed)
yhats_pop_tot <- yhats_pop %>% apply(1, sum) # npost * 1
yhats_sam_tot <- yhats_sam %>% apply(1, sum) # npost * 1
yobs_tot <- sum(svysmpl1 %>% dplyr::select(stringr::str_trim(stringr::str_split_1(outcome_formula[1], "~")[1]))) # a single value
post_est = (yhats_pop_tot + yobs_tot - yhats_sam_tot) / nrow(svypopu1) #npost
tCI = sapply(invlvls, function(level){
#confint(post_est, level = 0.95)
if(HPD_CI){
class(post_est) <- 'mcmc'
ci = coda::HPDinterval(post_est, prob = level, names = T)
names(ci) = paste(((1 - level)/2 * c(1, -1) + c(0, 1)) * 100, "%")
}else{
ci = ((1 - level)/2 * c(1, -1) + c(0, 1))
ci = quantile(post_est, probs = ci, names = T)
names(ci) = str_replace(names(ci), "%", " %")
}
ci
}, simplify = F)
tCI = do.call("c", tCI)
infr <- rbind(c(post_mean_est = mean(post_est), post_median_est = median(post_est), se = sd(post_est), tCI, sample_size = nrow(svysmpl1), population_size = nrow(svypopu1)))
return(infr)
}, simplify = F)
names(infr)[1] = "All"
return(infr)
}
}
data = simulate_survey_data(N = 1000, setting = 1, seed = 123)
data = simulate(N = 1000, setting = 1, seed = 123)
population = data$population
samples = data$samples
ipw = 1 / samples$true_pi
outcome_formula = "Y ~ Z1 + Z2 + Z3:auX_10"
BayesFun = "stan_glmer"
data$population
outcome_formula = "Y ~ Z1 + Z2 + Z3:auX_10"
BayesFun = "stan_glmer"
bayes_model = svyBayesmod(svysmpl = samples, svypopu = population,
outcome_formula = outcome_formula,
BayesFun = BayesFun, weights = ipw,
family = gaussian(), nskip = 2000, npost = 2000,
nchain = 2, printmod = TRUE)
samples
outcome_formula = "Y1 ~ Z1 + Z2 + Z3:auX_10"
bayes_model = svyBayesmod(svysmpl = samples, svypopu = population,
outcome_formula = outcome_formula,
BayesFun = BayesFun, weights = ipw,
family = gaussian(), nskip = 2000, npost = 2000,
nchain = 2, printmod = TRUE)
simulate(N = 3000, discretize = 3, setting = 3, seed = 123)
population = data$population
samples = data$samples
ipw = 1 / samples$true_pi
outcome_formula = "Y1 ~ Z1 + Z2 + Z3:auX_3"
BayesFun = "stan_glmer"
bayes_model = svyBayesmod(svysmpl = samples, svypopu = population,
outcome_formula = outcome_formula,
BayesFun = BayesFun, weights = ipw,
family = gaussian(), nskip = 2000, npost = 2000,
nchain = 2, printmod = TRUE)
samples$auX_3
bayes_model = svyBayesmod(svysmpl = samples, svypopu = population,
outcome_formula = outcome_formula,
BayesFun = BayesFun, weights = ipw,
family = gaussian(), nskip = 2000, npost = 2000,
nchain = 2, printmod = TRUE)
outcome_formula = "Y1 ~ Z1 + Z2 + Z3 + (1|auX_3)"
bayes_model = svyBayesmod(svysmpl = samples, svypopu = population,
outcome_formula = outcome_formula,
BayesFun = BayesFun, weights = ipw,
family = gaussian(), nskip = 2000, npost = 2000,
nchain = 2, printmod = TRUE)
bayes_model = svyBayesmod(svysmpl = samples, svypopu = population,
outcome_formula = outcome_formula,
BayesFun = BayesFun, weights = ipw,
family = gaussian(), nskip = 2000, npost = 2000,
nchain = 2, printmod = TRUE, invlvls = 0.95, stan_verbose = T)
devtools::document()
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::document()
